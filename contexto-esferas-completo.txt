--- 🌀🌱 CONTEXTO COMPLETO: ECOSISTEMA SPHEREGRID 🌱🌀 ---

--- Archivo 1/4: Tokens de Esfera (lib/theme/components/standard-sphere-tokens.ts) ---

import type { AppColorTokens, ColorSchemeVariant, Mode } from "../ColorToken";
import tinycolor from 'tinycolor2';
import type { StandardIconSize } from "./standard-icon-tokens";

export type SphereSizeVariant = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
export type ImportedIconSize = StandardIconSize;
export type SphereStyleType = 'filled' | 'subtle' | 'outline';

// 📌 ÚNICA FUENTE DE VERDAD PARA LOS TAMAÑOS
// Este objeto es ahora el "mapa maestro". Define todo lo que necesitamos saber sobre los tamaños.
export const SPHERE_SIZE_DEFINITIONS: Record<SphereSizeVariant, { rem: string; px: number }> = {
  xs: { rem: '2rem', px: 32 },
  sm: { rem: '2.5rem', px: 40 },
  md: { rem: '3rem', px: 48 },
  lg: { rem: '3.5rem', px: 56 },
  xl: { rem: '4rem', px: 64 },
  '2xl': { rem: '4.5rem', px: 72 },
};

// El token de espaciado proporcional que define el "aire" correcto para cada tamaño de esfera en el grid.
export const SPHERE_GRID_GAP_TOKENS: Record<SphereSizeVariant, { col: number; row: number }> = {
  xs: { col: 8,  row: 16 },
  sm: { col: 12, row: 24 },
  md: { col: 16, row: 32 },
  lg: { col: 20, row: 40 },
  xl: { col: 24, row: 48 },
  '2xl': { col: 24, row: 48 },
};

export interface SphereTokens {
  size: Record<SphereSizeVariant, string>; // Sigue esperando los valores en 'rem'
  styles: Record<SphereStyleType, {
    backgroundColor: string;
    foregroundColor: string;
    borderColor: string;
    gradient?: string;
    hoverBackgroundColor?: string;
    hoverForegroundColor?: string;
    activeBorderColor?: string;
  }>;
  badge: {
    offset: string;
    size: string;
  };
  transition: string;
  hoverTransform: string;
  activeTransform: string;
}

function createGradient(color: string): string {
  const lighter = tinycolor(color).lighten(12).toHexString();
  const base = color;
  const darker = tinycolor(color).darken(15).toHexString();
  return `radial-gradient(circle at 30% 30%, ${lighter}, ${base} 50%, ${darker})`;
}

export function generateSphereTokens(appColorTokens: AppColorTokens, mode: Mode): Record<ColorSchemeVariant, SphereTokens> {
  const isDark = mode === 'dark';
  const tokens = {} as Record<ColorSchemeVariant, SphereTokens>;

  // Derivamos los tamaños en 'rem' desde nuestra nueva fuente de verdad.
  const sphereRemSizes = Object.fromEntries(
    Object.entries(SPHERE_SIZE_DEFINITIONS).map(([key, value]) => [key, value.rem])
  ) as Record<SphereSizeVariant, string>;

  for (const colorScheme in appColorTokens) {
    const key = colorScheme as ColorSchemeVariant;
    const palette = appColorTokens[key];

    if (!palette || !['primary', 'secondary', 'tertiary', 'success', 'warning', 'danger', 'info', 'neutral'].includes(key)) {
      continue;
    }
    
    const mainColor = palette.pure;
    const textColor = palette.contrastText;
    const subtleTextColor = isDark ? palette.text : palette.textShade;
    const hoverBgColor = isDark ? tinycolor(mainColor).lighten(8).toHexString() : tinycolor(mainColor).darken(8).toHexString();
    const activeBgColor = isDark ? tinycolor(mainColor).lighten(12).toHexString() : tinycolor(mainColor).darken(12).toHexString();

    tokens[key] = {
      size: sphereRemSizes,
      styles: {
        filled: {
          backgroundColor: mainColor,
          foregroundColor: textColor,
          borderColor: 'transparent',
          gradient: createGradient(mainColor),
          hoverBackgroundColor: hoverBgColor,
          hoverForegroundColor: textColor,
          activeBorderColor: activeBgColor,
        },
        subtle: {
          backgroundColor: tinycolor(mainColor).setAlpha(0.15).toHexString(),
          foregroundColor: subtleTextColor,
          borderColor: 'transparent',
          gradient: `radial-gradient(circle at 30% 30%, ${tinycolor(mainColor).setAlpha(0.2)}, ${tinycolor(mainColor).setAlpha(0.1)})`,
          hoverBackgroundColor: tinycolor(mainColor).setAlpha(0.25).toHexString(),
          hoverForegroundColor: subtleTextColor,
          activeBorderColor: 'transparent',
        },
        outline: {
          backgroundColor: 'transparent',
          foregroundColor: mainColor,
          borderColor: mainColor,
          hoverBackgroundColor: tinycolor(mainColor).setAlpha(0.1).toHexString(),
          hoverForegroundColor: mainColor,
          activeBorderColor: mainColor,
        }
      },
      badge: {
        offset: '0.7rem',
        size: '1rem',
      },
      transition: 'all 0.2s ease-in-out',
      hoverTransform: 'translateY(-2px) scale(1.05)',
      activeTransform: 'translateY(0) scale(0.98)'
    };
  }

  return tokens;
}

--- Archivo 2/4: Componente StandardSphere (components/ui/StandardSphere.tsx) ---

'use client';

import React, { useMemo, useEffect } from 'react';
import { cn } from '@/lib/utils';
import { useTheme } from '@/app/theme-provider';
import { type ColorSchemeVariant } from '@/lib/theme/ColorToken';
import {
  generateSphereTokens,
  type ImportedIconSize,
} from '@/lib/theme/components/standard-sphere-tokens';
import {
  type StandardBadgeSize,
  BADGE_PIXEL_HEIGHTS,
} from '@/lib/theme/components/standard-badge-tokens';
import { StandardText, type StandardTextSize } from './StandardText';
import { StandardBadge, type StandardBadgeProps } from './StandardBadge';
import { StandardTooltip } from './StandardTooltip';
import { StandardIcon } from './StandardIcon';

// #region [Constants & Brain]
// -----------------------------------------------------------------------------
const RECTANGULAR_CELL_BADGE_SPACE = 24;
const MINIMUM_DIAMETER_FOR_BADGE = 48;

const useSphereConsciousness = (
  sphereDiameter: number,
  wantsBadge: boolean,
) => {
  return useMemo(() => {
    const canShowBadge = wantsBadge && sphereDiameter >= MINIMUM_DIAMETER_FOR_BADGE;

    let textSemanticSize: StandardTextSize = '2xs';
    let iconSemanticSize: ImportedIconSize = '2xs';

    if (sphereDiameter > 96) {
      textSemanticSize = '2xl'; iconSemanticSize = '2xl';
    } else if (sphereDiameter > 80) {
      textSemanticSize = 'xl'; iconSemanticSize = 'xl';
    } else if (sphereDiameter > 64) {
      textSemanticSize = 'lg'; iconSemanticSize = 'lg';
    } else if (sphereDiameter > 48) {
      textSemanticSize = 'base'; iconSemanticSize = 'md';
    } else if (sphereDiameter > 40) {
      textSemanticSize = 'sm'; iconSemanticSize = 'sm';
    } else if (sphereDiameter > 32) {
      textSemanticSize = 'xs'; iconSemanticSize = 'xs';
    }
    
    let badgeSemanticSize: StandardBadgeSize = '2xs';
    if (sphereDiameter > 64) {
      badgeSemanticSize = 'sm';
    } else if (sphereDiameter > 48) {
      badgeSemanticSize = 'xs';
    }

    return {
      finalSphereDiameter: sphereDiameter,
      canShowBadge,
      textSemanticSize,
      iconSemanticSize,
      badgeSemanticSize,
    };
  }, [sphereDiameter, wantsBadge]);
};
// #endregion

// #region [Component Types]
// -----------------------------------------------------------------------------
export interface StatusBadgeInfo {
  text: string;
  icon?: React.ComponentType<{ className?: string }>;
  iconClassName?: string;
  colorScheme?: ColorSchemeVariant;
  styleType?: StandardBadgeProps['styleType'];
}

export interface StandardSphereProps {
  sizeInPx: number;
  value?: React.ReactNode;
  keyGroup?: string;
  colorScheme?: ColorSchemeVariant;
  styleType?: 'filled' | 'subtle' | 'outline';
  tooltip?: string;
  statusBadge?: StatusBadgeInfo;
  icon?: React.ElementType<React.SVGProps<SVGSVGElement>>;
  onlyIcon?: boolean;
  onClick?: () => void;
  disabled?: boolean;
  className?: string;
  dataTestId?: string;
  isLogSpokesperson?: boolean;
}

export interface SphereItemData
  extends Omit<
    StandardSphereProps,
    'sizeInPx' | 'onClick' | 'className' | 'statusBadge' | 'isLogSpokesperson'
  > {
  id: string;
  onClick?: (id: string) => void;
  className?: string;
  statusBadge?: StatusBadgeInfo;
}
// #endregion

// #region [Component Implementation]
// -----------------------------------------------------------------------------
export const StandardSphere = React.forwardRef<
  HTMLDivElement,
  StandardSphereProps
>(
  (
    {
      sizeInPx,
      value,
      keyGroup,
      colorScheme = 'primary',
      styleType = 'filled',
      tooltip,
      statusBadge,
      icon: IconComponent,
      onlyIcon = false,
      onClick,
      disabled = false,
      className,
      dataTestId,
      isLogSpokesperson = false,
    },
    ref,
  ) => {
    const decisions = useSphereConsciousness(sizeInPx, !!statusBadge);

    // 📌 LÓGICA DE LA ESFERA PORTAVOZ
    useEffect(() => {
        if (isLogSpokesperson) {
            console.groupCollapsed(`[Esfera Portavoz 🗣️] Proceso de Decisión del Inquilino`);
            console.log(`Recibido del Grid -> Ancho de Celda (sizeInPx): ${sizeInPx.toFixed(2)}px`);
            console.log(`Espacio para Badge Asumido por el Grid: ${RECTANGULAR_CELL_BADGE_SPACE}px`);
            console.log(`Altura total de mi celda: ${(sizeInPx + RECTANGULAR_CELL_BADGE_SPACE).toFixed(2)}px`);
            console.log(`¿Quiero un badge?: ${!!statusBadge}`);
            console.log(`Mi diámetro es de ${decisions.finalSphereDiameter.toFixed(2)}px. ¿Puedo mostrar el badge? -> ${decisions.canShowBadge ? 'Sí' : 'No'}`);
            console.log(`Decisiones de tamaño para mis hijos:`);
            console.log(`   -> StandardText: '${decisions.textSemanticSize}'`);
            console.log(`   -> StandardIcon: '${decisions.iconSemanticSize}'`);
            if(decisions.canShowBadge) {
                console.log(`   -> StandardBadge: '${decisions.badgeSemanticSize}'`);
            }
            console.groupEnd();
        }
    }, [isLogSpokesperson, sizeInPx, decisions]);


    const { appColorTokens, mode } = useTheme();
    const [isHovered, setIsHovered] = React.useState(false);
    const [isActive, setIsActive] = React.useState(false);

    const allSphereTokens = useMemo(() => {
        if (!appColorTokens) return null;
        return generateSphereTokens(appColorTokens, mode);
    }, [appColorTokens, mode]);
    const tokens = useMemo(() => {
        if (!allSphereTokens) return null;
        return allSphereTokens[colorScheme] || allSphereTokens.primary;
    }, [allSphereTokens, colorScheme]);
    if (!tokens) return null;

    const styleTokens = tokens.styles[styleType];
    const currentBgColor = isHovered && styleTokens.hoverBackgroundColor ? styleTokens.hoverBackgroundColor : styleTokens.backgroundColor;
    const currentFgColor = isHovered && styleTokens.hoverForegroundColor ? styleTokens.hoverForegroundColor : styleTokens.foregroundColor;
    const currentBorderColor = isActive && styleTokens.activeBorderColor ? styleTokens.activeBorderColor : styleTokens.borderColor;
    const hasActiveBorder = isActive && styleTokens.activeBorderColor;
    const currentGradient = isHovered ? 'none' : (styleType === 'filled' || styleType === 'subtle' ? styleTokens.gradient : 'none');


    const sphereCircleStyles: React.CSSProperties = {
      width: `${decisions.finalSphereDiameter}px`,
      height: `${decisions.finalSphereDiameter}px`,
      backgroundColor: currentBgColor,
      color: currentFgColor,
      borderColor: currentBorderColor,
      borderWidth: styleType === 'outline' || hasActiveBorder ? '2px' : '0',
      borderStyle: 'solid',
      backgroundImage: currentGradient,
      transition: tokens.transition,
      cursor: onClick && !disabled ? 'pointer' : 'default',
      transform: isActive ? tokens.activeTransform : isHovered ? tokens.hoverTransform : 'none',
      opacity: disabled ? 0.6 : 1,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      flexDirection: 'column',
      position: 'relative',
    };
    
    let sphereInnerContent: React.ReactNode = null;
    if (onlyIcon && IconComponent) {
        sphereInnerContent = <StandardIcon size={decisions.iconSemanticSize}><IconComponent /></StandardIcon>;
    } else if (value !== undefined && value !== null) {
        sphereInnerContent = <StandardText size={decisions.textSemanticSize} weight="medium" className="text-center">{value}</StandardText>;
    } else if (IconComponent) {
        sphereInnerContent = <StandardIcon size={decisions.iconSemanticSize}><IconComponent /></StandardIcon>;
    }

    const sphereContainerStyles: React.CSSProperties = {
        height: `${sizeInPx + RECTANGULAR_CELL_BADGE_SPACE}px`,
    };

    const sphereContainer = (
      <div
        ref={ref}
        className={cn('flex flex-col items-center justify-center w-full', className)}
        style={sphereContainerStyles}
        data-test-id={dataTestId}
      >
        <div
          className={cn(
            'rounded-full overflow-hidden',
            disabled && 'pointer-events-none',
          )}
          style={sphereCircleStyles}
          onMouseEnter={() => !disabled && setIsHovered(true)}
          onMouseLeave={() => {
            if (!disabled) { setIsHovered(false); setIsActive(false); }
          }}
          onMouseDown={() => !disabled && setIsActive(true)}
          onMouseUp={() => !disabled && setIsActive(false)}
          onClick={!disabled ? onClick : undefined}
        >
          {sphereInnerContent}
        </div>
        {decisions.canShowBadge && statusBadge && (
          <div className="pt-0.5">
            <StandardBadge
            
              size={decisions.badgeSemanticSize}
              colorScheme={statusBadge.colorScheme || 'primary'}
              styleType={statusBadge.styleType || 'subtle'}
              leftIcon={statusBadge.icon}
              iconClassName={statusBadge.iconClassName}
            >
              {statusBadge.text}
            </StandardBadge>
          </div>
        )}
      </div>
    );

    if (tooltip) {
      return (
        <StandardTooltip
          trigger={sphereContainer}
          styleType="solid"
          colorScheme={colorScheme}
        >
          {tooltip}
        </StandardTooltip>
      );
    }

    return sphereContainer;
  },
);

StandardSphere.displayName = 'StandardSphere';
// #endregion

--- Archivo 3/4: Componente StandardSphereGrid (components/ui/StandardSphereGrid.tsx) ---

'use client';

import React, { useState, useMemo, useEffect } from 'react';
import { cn } from '@/lib/utils';
import { type ColorSchemeVariant } from '@/lib/theme/ColorToken';
import { StandardSphere, type SphereItemData } from './StandardSphere';
import { StandardCard } from './StandardCard';
import { StandardText } from './StandardText';
import { SustratoLoadingLogo } from './sustrato-loading-logo';

// #region [Grid Configuration & Constants]
// -----------------------------------------------------------------------------
const MINIMUM_SPHERE_DIAMETER = 32;
const MAXIMUM_SPHERE_DIAMETER = 72;
// #endregion

// #region [Component Types]
// -----------------------------------------------------------------------------
export type SphereGridSortBy = 'value' | 'keyGroup' | 'none';
export type SphereGridSortDirection = 'asc' | 'desc';

export interface StandardSphereGridProps {
  containerWidth: number;
  containerHeight: number;
  items: SphereItemData[];
  keyGroupVisibility?: { [key: string]: boolean };
  sortBy?: SphereGridSortBy;
  sortDirection?: SphereGridSortDirection;
  groupByKeyGroup?: boolean;
  fixedSize?: number;
  isLoading?: boolean;
  loadingMessage?: string;
  className?: string;
  cardColorScheme?: ColorSchemeVariant;
  title?: string;
  subtitle?: string;
  emptyStateText?: string;
}
// #endregion

// #region [Component Implementation]
// -----------------------------------------------------------------------------
export const StandardSphereGrid = ({
  containerWidth,
  containerHeight,
  items,
  keyGroupVisibility,
  sortBy = 'none',
  sortDirection = 'asc',
  groupByKeyGroup = false,
  fixedSize,
  isLoading: externalIsLoading = false,
  loadingMessage = 'Calculando la distribución...',
  className,
  cardColorScheme = 'primary',
  title = 'Visualización de Esferas',
  subtitle,
  emptyStateText = 'No hay ítems para mostrar.',
}: StandardSphereGridProps) => {

  const [calculatedSpherePx, setCalculatedSpherePx] = useState<number>(MINIMUM_SPHERE_DIAMETER);
  const [effectiveOverflow, setEffectiveOverflow] = useState<'shrink' | 'scroll'>('shrink');
  const [calculatedCols, setCalculatedCols] = useState<number>(1);
  
  const isLoading = externalIsLoading || !containerWidth || !containerHeight;

  const processedItems = useMemo(() => {
    let filtered = items.filter(item => {
      if (!keyGroupVisibility || !item.keyGroup) return true;
      return keyGroupVisibility[item.keyGroup] !== false;
    });

    if (sortBy !== 'none') {
      const compareValues = (a: any, b: any) => {
        if (typeof a === 'number' && typeof b === 'number') return a - b;
        if (typeof a === 'string' && typeof b === 'string') return a.localeCompare(b);
        return 0;
      };
      filtered.sort((a, b) => {
        let comparison = 0;
        if (groupByKeyGroup && a.keyGroup && b.keyGroup) {
          comparison = a.keyGroup.localeCompare(b.keyGroup);
        }
        if (comparison === 0) {
          if (sortBy === 'keyGroup' && a.keyGroup && b.keyGroup) {
            comparison = a.keyGroup.localeCompare(b.keyGroup);
          } else if (sortBy === 'value') {
            comparison = compareValues(a.value, b.value);
          }
        }
        return sortDirection === 'asc' ? comparison : -comparison;
      });
    }
    return filtered;
  }, [items, keyGroupVisibility, sortBy, sortDirection, groupByKeyGroup]);

  const keyGroupColorMap = useMemo(() => {
    const uniqueKeyGroups = [
      ...new Set(processedItems.map(item => item.keyGroup).filter(Boolean)),
    ] as string[];
    const colorSchemes: ColorSchemeVariant[] = ['primary', 'secondary', 'tertiary', 'accent', 'neutral'];
    const map: { [key: string]: ColorSchemeVariant } = {};
    uniqueKeyGroups.forEach((group, index) => {
      map[group] = colorSchemes[index % colorSchemes.length];
    });
    return map;
  }, [processedItems]);

  useEffect(() => {
    if (isLoading || processedItems.length === 0) return;

    console.groupCollapsed(`[SphereGrid Brain 🧠 - Búsqueda por TAMAÑO DE CELDA RECTANGULAR]`);

    const HORIZONTAL_SAFETY_MARGIN = 20;
    const VERTICAL_SAFETY_MARGIN = 100;
    const PADDING = 16;
    const RECTANGULAR_CELL_BADGE_SPACE = 32;
    
    const availableWidth = containerWidth - PADDING * 2 - HORIZONTAL_SAFETY_MARGIN;
    const availableHeight = containerHeight - PADDING * 2 - VERTICAL_SAFETY_MARGIN;
    const GAP = availableWidth > 600 ? 16 : 8;

    console.log(`Contexto -> Área útil: ${availableWidth.toFixed(0)}x${availableHeight.toFixed(0)} | Items: ${processedItems.length} | Espacio Badge Asumido: ${RECTANGULAR_CELL_BADGE_SPACE}px`);

    let finalSizePx: number;
    let finalCols: number;
    let finalOverflow: 'scroll' | 'shrink';
    
    if (fixedSize) {
        console.log(`MODO: Tamaño Fijo`);
        finalSizePx = Math.max(MINIMUM_SPHERE_DIAMETER, Math.min(fixedSize, MAXIMUM_SPHERE_DIAMETER));
        finalCols = Math.max(1, Math.floor((availableWidth + GAP) / (finalSizePx + GAP)));
        const rows = Math.ceil(processedItems.length / finalCols);
        const neededHeight = rows * (finalSizePx + RECTANGULAR_CELL_BADGE_SPACE + GAP) - GAP;
        finalOverflow = neededHeight > availableHeight ? 'scroll' : 'shrink';
    } else {
        console.log(`MODO: Tetris Holístico (Búsqueda por Tamaño de Celda Rectangular)`);
        
        let bestFit = {
            size: MINIMUM_SPHERE_DIAMETER,
            cols: Math.max(1, Math.floor((availableWidth + GAP) / (MINIMUM_SPHERE_DIAMETER + GAP))),
            overflow: 'scroll' as 'scroll' | 'shrink'
        };

        let low = MINIMUM_SPHERE_DIAMETER;
        let high = MAXIMUM_SPHERE_DIAMETER;
        console.log(`Definiendo terreno de búsqueda -> Ancho de esfera: de ${low.toFixed(2)}px a ${high.toFixed(2)}px`);

        while (low <= high) {
            const midSize = (low + high) / 2;
            if (midSize <= 0) break;
            
            console.log(`-- Iteración: low=${low.toFixed(2)}, high=${high.toFixed(2)}. Probando ancho (G) = ${midSize.toFixed(2)}px.`);

            const colsForSize = Math.floor((availableWidth + GAP) / (midSize + GAP));
            if (colsForSize === 0) {
                high = midSize - 0.1;
                continue;
            }
            const rowsNeeded = Math.ceil(processedItems.length / colsForSize);
            const totalHeightNeeded = rowsNeeded * (midSize + RECTANGULAR_CELL_BADGE_SPACE + GAP) - GAP;
            
            console.log(`   -> Con ancho ${midSize.toFixed(2)}px, caben ${colsForSize} columnas. Necesitaríamos ${rowsNeeded} filas.`);
            console.log(`   -> Altura total necesaria (con Celdas Rectangulares): ${totalHeightNeeded.toFixed(2)}px vs. Disponible: ${availableHeight.toFixed(2)}px.`);

            if (totalHeightNeeded <= availableHeight) {
                console.log(`   ✅ CABE. Es una solución válida. Guardando y probando con tamaños MÁS GRANDES.`);
                const realDiameter = (availableWidth - (GAP * (colsForSize - 1))) / colsForSize;
                bestFit = { size: realDiameter, cols: colsForSize, overflow: 'shrink' };
                low = midSize + 0.1;
            } else {
                console.log(`   ❌ NO CABE. Se necesitan esferas MÁS PEQUEÑAS.`);
                high = midSize - 0.1;
            }
        }
        finalSizePx = bestFit.size;
        finalCols = bestFit.cols;
        finalOverflow = bestFit.overflow;
    }

    console.log('%c -> Decisión Final del Grid:', 'font-weight: bold; color: #4caf50;');
    console.log(`     Tamaño de Esfera (Ancho de Celda): ${finalSizePx.toFixed(2)}px`);
    console.log(`     Columnas: ${finalCols}`);
    console.log(`     Desbordamiento: '${finalOverflow}'`);
    console.groupEnd();

    setCalculatedSpherePx(finalSizePx);
    setCalculatedCols(finalCols);
    setEffectiveOverflow(finalOverflow);

  }, [processedItems, containerWidth, containerHeight, fixedSize]);
  
  const renderGridContent = useMemo(() => {
    if (processedItems.length === 0 && !isLoading) {
      return (
        <div className="flex flex-col items-center justify-center h-full text-center">
          <StandardText preset="body" size="md">{emptyStateText}</StandardText>
          {keyGroupVisibility && (
            <StandardText size="sm" colorScheme="neutral" colorShade="textShade" className="mt-2">
              (Verifica los filtros de visibilidad)
            </StandardText>
          )}
        </div>
      );
    }

    const gridStyles: React.CSSProperties = {
      display: 'grid',
      gap: `${containerWidth > 600 ? 16 : 8}px`,
      gridTemplateColumns: `repeat(${calculatedCols}, 1fr)`,
      justifyItems: 'center',
      alignItems: 'start',
    };

    return (
      <div style={gridStyles}>
        {processedItems.map((item, index) => (
          <StandardSphere
            key={item.id}
            {...item}
            sizeInPx={calculatedSpherePx}
            colorScheme={item.colorScheme || (item.keyGroup ? keyGroupColorMap[item.keyGroup] : 'primary')}
            onClick={() => item.onClick?.(item.id)}
            isLogSpokesperson={index === 0}
          />
        ))}
      </div>
    );
  }, [processedItems, emptyStateText, keyGroupVisibility, containerWidth, calculatedSpherePx, calculatedCols, keyGroupColorMap, isLoading]);

  return (
    // 📌 VICTORIA FINAL: Pasamos la decisión del cerebro a la nueva prop del StandardCard.
    // Esto resuelve el conflicto CSS y permite que el scroll funcione como se espera.
    <StandardCard
      animateEntrance
      colorScheme={cardColorScheme}
      accentPlacement="top"
      accentColorScheme={cardColorScheme}
      shadow="md"
      className={cn('flex flex-col h-full', className)}
      styleType="subtle"
      hasOutline={false}
      contentCanScroll={effectiveOverflow === 'scroll'}
    >
      <StandardCard.Header>
        <StandardText preset="subheading" weight="medium" colorScheme={cardColorScheme}>
          {title}
        </StandardText>
        {subtitle && (
          <StandardText size="sm" colorScheme="neutral" colorShade="textShade" className="mt-1">
            {subtitle}
          </StandardText>
        )}
      </StandardCard.Header>
      {/* 📌 SIMPLIFICACIÓN: Ya no necesitamos el div wrapper con lógica de scroll.
          StandardCard.Content, con su padding, es ahora el contenedor directo. */}
      <StandardCard.Content className='p-4'>
        {isLoading ? (
          <div className="flex h-full w-full items-center justify-center bg-background/20">
            <SustratoLoadingLogo size={48} text={loadingMessage} showText />
          </div>
        ) : (
          renderGridContent
        )}
      </StandardCard.Content>
    </StandardCard>
  );
};
// #endregion

--- Archivo 4/4: Página Showroom (app/showroom/standarspheregrid/page.tsx) ---

'use client';

import React, { useState, useMemo, useRef, useEffect } from 'react';
import { StandardPageBackground } from '@/components/ui/StandardPageBackground';
import { StandardPageTitle } from '@/components/ui/StandardPageTitle';
import { Layers, CheckCircle, AlertTriangle, Info, CircleDot, Scaling, SortAsc, SortDesc, TestTube } from 'lucide-react';
import { StandardSlider } from '@/components/ui/StandardSlider';
import { 
  StandardSphereGrid, 
  type SphereGridSortBy, 
  type SphereGridSortDirection 
} from '@/components/ui/StandardSphereGrid';
import { type SphereItemData } from '@/components/ui/StandardSphere';
import { SPHERE_SIZE_DEFINITIONS, type SphereSizeVariant } from '@/lib/theme/components/standard-sphere-tokens';
import { StandardText } from '@/components/ui/StandardText';
import { StandardCard } from '@/components/ui/StandardCard';
import { StandardCheckbox } from '@/components/ui/StandardCheckbox';
import { type StandardBadgeStyleType } from '@/lib/theme/components/standard-badge-tokens';

const KEY_GROUPS = ['Investigador A', 'Investigador B', 'Investigador C', 'Pendiente'];
const STATUS_ICONS = [CheckCircle, AlertTriangle, Info, CircleDot];

const generateSphereData = (
  count: number,
  options: { showBadges: boolean; useOnlyIcon: boolean }
): SphereItemData[] => {
  const data: SphereItemData[] = [];
  for (let i = 1; i <= count; i++) {
    const keyGroupIndex = Math.floor(Math.random() * KEY_GROUPS.length);
    const keyGroup = KEY_GROUPS[keyGroupIndex];
    const icon = STATUS_ICONS[keyGroupIndex];
    const badgeStyle: StandardBadgeStyleType = i % 3 === 0 ? 'solid' : 'subtle';

    data.push({
      id: `sphere-${i}`,
      value: Math.floor(Math.random() * 1000),
      keyGroup: keyGroup,
      tooltip: `Lote de ${Math.floor(Math.random() * 50) + 10} artículos - ${keyGroup}`,
      icon: icon,
      onlyIcon: options.useOnlyIcon,
      ...(options.showBadges && {
        statusBadge: {
          text: keyGroup.substring(0, 4).trim(),
          styleType: badgeStyle,
        },
      }),
      onClick: (id: string) => console.log(`Sphere ${id} clicked!`),
    });
  }
  return data;
};

export default function SphereGridShowroomPage() {
  const [numberOfSpheres, setNumberOfSpheres] = useState<number[]>([50]);
  const [fixedSize, setFixedSize] = useState<number | undefined>(undefined);
  const [sortBy, setSortBy] = useState<SphereGridSortBy>('none');
  const [sortDirection, setSortDirection] = useState<SphereGridSortDirection>('asc');
  const [groupByKeyGroup, setGroupByKeyGroup] = useState<boolean>(false);
  const [showBadges, setShowBadges] = useState<boolean>(true);
  const [useOnlyIconMode, setUseOnlyIconMode] = useState<boolean>(false);
  const [keyGroupVisibility, setKeyGroupVisibility] = useState<Record<string, boolean>>({
    'Investigador A': true, 'Investigador B': true, 'Investigador C': true, 'Pendiente': true,
  });

  const gridContainerRef = useRef<HTMLDivElement>(null);
  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 });

  useEffect(() => {
    const element = gridContainerRef.current;
    if (!element) return;
    const observer = new ResizeObserver(entries => {
      if (entries[0]) {
        const { width, height } = entries[0].contentRect;
        setContainerSize({ width, height });
      }
    });
    observer.observe(element);
    return () => observer.disconnect();
  }, []);

  const sphereData = useMemo(() => generateSphereData(numberOfSpheres[0], { showBadges, useOnlyIcon: useOnlyIconMode }), [numberOfSpheres, showBadges, useOnlyIconMode]);
  
  const subtitle = fixedSize
    ? `Modo "Tamaño Fijo": Todas las esferas tienen ${fixedSize}px. Scroll se activará si es necesario.`
    : `Modo "Automático": El tamaño se ajusta para evitar el scroll (modo Tetris).`;

  return (
    <StandardPageBackground variant="gradient">
      <div className="container mx-auto py-8 space-y-8">
        <StandardPageTitle
          title="Showroom de StandardSphereGrid"
          subtitle="Un parque de juegos para probar todas las capacidades del orquestador de esferas."
          mainIcon={TestTube}
        />
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
          <StandardCard colorScheme="neutral" className="lg:col-span-1" accentPlacement="left" contentCanScroll={true}>
            <StandardCard.Header>
              <StandardText preset="subheading" weight="medium">Controles del Laboratorio</StandardText>
            </StandardCard.Header>
            <StandardCard.Content className="space-y-6">
              
              <div>
                <StandardText weight="semibold" className="mb-2 block">1. Cantidad de Esferas</StandardText>
                <StandardSlider value={numberOfSpheres} min={10} max={200} step={5} onValueChange={setNumberOfSpheres} showTooltip />
                <StandardText size="sm" className="mt-2 text-center text-muted-foreground">{numberOfSpheres[0]} esferas</StandardText>
              </div>

              <div>
                <StandardText weight="semibold" className="mb-4 block">2. Modo de Layout</StandardText>
                <div className="flex flex-col space-y-2">
                  <label className="flex items-center gap-3 p-2 rounded-md transition-colors hover:bg-neutral-interactive-hover cursor-pointer">
                    <input type="radio" name="layoutMode" checked={fixedSize === undefined} onChange={() => setFixedSize(undefined)} className="form-radio h-4 w-4 text-primary-pure"/>
                    <Scaling className="h-5 w-5 text-neutral-content" />
                    <StandardText weight="medium">Automático (Tetris)</StandardText>
                  </label>
                  {(Object.keys(SPHERE_SIZE_DEFINITIONS) as SphereSizeVariant[]).map(size => (
                    <label key={size} className="flex items-center gap-3 p-2 rounded-md transition-colors hover:bg-neutral-interactive-hover cursor-pointer">
                        <input 
                            type="radio" 
                            name="layoutMode" 
                            value={SPHERE_SIZE_DEFINITIONS[size].px}
                            checked={fixedSize === SPHERE_SIZE_DEFINITIONS[size].px} 
                            onChange={() => setFixedSize(SPHERE_SIZE_DEFINITIONS[size].px)}
                            className="form-radio h-4 w-4 text-primary-pure"
                        />
                        <StandardText weight="medium" className="w-24">{`Fijo: ${size.toUpperCase()} (${SPHERE_SIZE_DEFINITIONS[size].px}px)`}</StandardText>
                    </label>
                  ))}
                </div>
              </div>

              <div>
                  <StandardText weight="semibold" className="mb-4 block">3. Apariencia de Esferas</StandardText>
                  <div className="space-y-3">
                    <StandardCheckbox 
                      checked={showBadges} 
                      onChange={(e) => setShowBadges(e.target.checked)} 
                      id="showBadges" 
                      label="Mostrar Badges" 
                    />
                    <StandardCheckbox 
                      checked={useOnlyIconMode} 
                      onChange={(e) => setUseOnlyIconMode(e.target.checked)} 
                      id="onlyIcon" 
                      label="Modo 'Solo Icono'" 
                    />
                  </div>
              </div>
              
              <div>
                <StandardText weight="semibold" className="mb-4 block">4. Orden y Agrupación</StandardText>
                <div className="space-y-4">
                  <StandardCheckbox 
                  checked={groupByKeyGroup} 
                  onChange={(e) => setGroupByKeyGroup(e.target.checked)} 
                  id="groupBy" 
                  label="Agrupar por KeyGroup" 
                />
                  <div className="flex gap-4">
                      <button onClick={()=> setSortBy('value')} className={`p-2 rounded ${sortBy === 'value' ? 'bg-primary-pure text-white' : 'bg-neutral-interactive'}`}>Por Valor</button>
                      <button onClick={()=> setSortBy('keyGroup')} className={`p-2 rounded ${sortBy === 'keyGroup' ? 'bg-primary-pure text-white' : 'bg-neutral-interactive'}`}>Por Grupo</button>
                      <button onClick={()=> setSortDirection((dir: SphereGridSortDirection) => dir === 'asc' ? 'desc' : 'asc')} className="p-2 rounded bg-neutral-interactive">
                          {sortDirection === 'asc' ? <SortAsc/> : <SortDesc/>}
                      </button>
                  </div>
                </div>
              </div>
              
              <div>
                <StandardText weight="semibold" className="mb-4 block">5. Visibilidad por Grupo</StandardText>
                <div className="space-y-2">
                  {KEY_GROUPS.map(group => (
                    <StandardCheckbox
                      key={group}
                      id={`vis-${group}`}
                      label={group}
                      checked={keyGroupVisibility[group]}
                      onChange={(e) => setKeyGroupVisibility(prev => ({
                        ...prev, 
                        [group]: e.target.checked
                      }))}
                    />
                  ))}
                </div>
              </div>

            </StandardCard.Content>
          </StandardCard>

          <div ref={gridContainerRef} className="lg:col-span-2 relative h-[80vh] min-h-[600px] flex flex-col">
            <StandardSphereGrid
              items={sphereData}
              fixedSize={fixedSize}
              containerWidth={containerSize.width}
              containerHeight={containerSize.height}
              isLoading={!containerSize.width}
              loadingMessage="Midiendo lienzo..."
              title="Resultado en Vivo"
              subtitle={subtitle}
              cardColorScheme="secondary"
              className="flex-grow"
              
              sortBy={sortBy}
              sortDirection={sortDirection}
              groupByKeyGroup={groupByKeyGroup}
              keyGroupVisibility={keyGroupVisibility}
            />
          </div>
        </div>
      </div>
    </StandardPageBackground>
  );
}