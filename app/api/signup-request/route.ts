import { NextRequest, NextResponse } from 'next/server';
import { Resend } from 'resend';
import { Redis } from '@upstash/redis';
import { Ratelimit } from '@upstash/ratelimit';
import { z } from 'zod';

// üîç DIAGN√ìSTICO: Verificar variables de entorno
console.log('üîç [DIAGN√ìSTICO] Verificando variables de entorno:');
console.log('üìß RESEND_API_KEY:', process.env.RESEND_API_KEY ? `‚úÖ Configurada (${process.env.RESEND_API_KEY.substring(0, 10)}...)` : '‚ùå NO CONFIGURADA');
console.log('üîó UPSTASH_REDIS_REST_URL:', process.env.UPSTASH_REDIS_REST_URL ? `‚úÖ Configurada (${process.env.UPSTASH_REDIS_REST_URL.substring(0, 30)}...)` : '‚ùå NO CONFIGURADA');
console.log('üîë UPSTASH_REDIS_REST_TOKEN:', process.env.UPSTASH_REDIS_REST_TOKEN ? `‚úÖ Configurada (${process.env.UPSTASH_REDIS_REST_TOKEN.substring(0, 10)}...)` : '‚ùå NO CONFIGURADA');

// Configuraci√≥n del cliente Resend
const resend = new Resend(process.env.RESEND_API_KEY);

// Configuraci√≥n de Redis y Rate Limiter con validaci√≥n
let redis: Redis | null = null;
let ratelimit: Ratelimit | null = null;

if (process.env.UPSTASH_REDIS_REST_URL && process.env.UPSTASH_REDIS_REST_TOKEN) {
  console.log('‚úÖ [REDIS] Inicializando cliente Redis...');
  redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL,
    token: process.env.UPSTASH_REDIS_REST_TOKEN,
  });
  
  ratelimit = new Ratelimit({
    redis: redis,
    limiter: Ratelimit.slidingWindow(3, '10 m'), // 3 solicitudes cada 10 minutos
    analytics: true,
  });
  console.log('‚úÖ [REDIS] Rate limiter configurado correctamente');
} else {
  console.error('‚ùå [REDIS] Variables de entorno de Upstash no configuradas');
}

// Esquema de validaci√≥n con Zod
const signupRequestSchema = z.object({
  name: z.string().min(2, 'El nombre debe tener al menos 2 caracteres').max(100, 'El nombre no puede exceder 100 caracteres'),
  email: z.string().email('Debe proporcionar un email v√°lido'),
  message: z.string().min(10, 'El mensaje debe tener al menos 10 caracteres').max(1000, 'El mensaje no puede exceder 1000 caracteres'),
  website: z.string().optional(), // Campo honeypot
});

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ [POST] Iniciando procesamiento de solicitud de beta...');
    
    // 1. Verificar si el rate limiter est√° disponible
    if (!ratelimit) {
      console.error('‚ùå [RATE_LIMITER] Rate limiter no disponible - variables de Upstash no configuradas');
      return NextResponse.json(
        { 
          error: 'Servicio temporalmente no disponible. Configuraci√≥n de rate limiting pendiente.',
          details: 'Las variables de entorno UPSTASH_REDIS_REST_URL y UPSTASH_REDIS_REST_TOKEN no est√°n configuradas.'
        },
        { status: 503 }
      );
    }
    
    // 2. Rate Limiting por IP
    const ip = request.ip ?? '127.0.0.1';
    console.log(`üîç [RATE_LIMITER] Verificando l√≠mites para IP: ${ip}`);
    const { success, limit, reset, remaining } = await ratelimit.limit(ip);

    if (!success) {
      console.log(`‚ö†Ô∏è [RATE_LIMITER] L√≠mite excedido para IP ${ip}. L√≠mite: ${limit}, Restante: ${remaining}`);
      return NextResponse.json(
        { 
          error: 'Demasiadas solicitudes. Por favor, int√©ntalo de nuevo m√°s tarde.',
          details: `L√≠mite: ${limit}, Restante: ${remaining}, Reset: ${new Date(reset).toLocaleString()}`
        },
        { status: 429 }
      );
    }
    
    console.log(`‚úÖ [RATE_LIMITER] Rate limit OK para IP ${ip}. Restante: ${remaining}/${limit}`);

    // 3. Parsear y validar datos del cuerpo de la petici√≥n
    console.log('üìù [VALIDATION] Parseando datos del formulario...');
    const body = await request.json();
    console.log('üìã [VALIDATION] Datos recibidos:', { 
      name: body.name ? `‚úÖ ${body.name.substring(0, 20)}...` : '‚ùå Vac√≠o',
      email: body.email ? `‚úÖ ${body.email}` : '‚ùå Vac√≠o',
      message: body.message ? `‚úÖ ${body.message.substring(0, 50)}...` : '‚ùå Vac√≠o',
      website: body.website ? `‚ö†Ô∏è HONEYPOT: "${body.website}"` : '‚úÖ Honeypot vac√≠o'
    });
    
    const validationResult = signupRequestSchema.safeParse(body);

    if (!validationResult.success) {
      console.log('‚ùå [VALIDATION] Validaci√≥n fallida:', validationResult.error.errors);
      return NextResponse.json(
        { 
          error: 'Datos de formulario inv√°lidos',
          details: validationResult.error.errors
        },
        { status: 400 }
      );
    }
    
    console.log('‚úÖ [VALIDATION] Validaci√≥n exitosa');
    const { name, email, message, website } = validationResult.data;

    // 4. Verificaci√≥n del campo honeypot
    if (website && website.trim() !== '') {
      // Si el campo honeypot fue rellenado, es probable que sea un bot
      // Devolvemos √©xito silenciosamente sin enviar el correo
      console.log(`üçØ [HONEYPOT] Bot detectado desde IP ${ip}. Campo honeypot rellenado: "${website}"`);
      return NextResponse.json({ success: true, message: 'Solicitud enviada correctamente.' });
    }
    
    console.log('‚úÖ [HONEYPOT] Verificaci√≥n anti-bot pasada');

    // 5. Verificar configuraci√≥n de Resend
    if (!process.env.RESEND_API_KEY) {
      console.error('‚ùå [EMAIL] RESEND_API_KEY no configurada');
      return NextResponse.json(
        { error: 'Servicio de correo no disponible. Configuraci√≥n pendiente.' },
        { status: 503 }
      );
    }

    // 6. Env√≠o del correo usando Resend
    console.log('üìß [EMAIL] Preparando env√≠o de correo...');
    const emailSubject = `Nueva solicitud de acceso a beta - ${name}`;
    const emailHtml = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #6366f1; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px;">
          Nueva Solicitud de Acceso a Beta
        </h2>
        
        <div style="background-color: #f9fafb; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="margin-top: 0; color: #374151;">Informaci√≥n del Solicitante</h3>
          <p><strong>Nombre:</strong> ${name}</p>
          <p><strong>Email:</strong> ${email}</p>
        </div>
        
        <div style="background-color: #ffffff; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px;">
          <h3 style="margin-top: 0; color: #374151;">Mensaje</h3>
          <p style="white-space: pre-wrap; line-height: 1.6;">${message}</p>
        </div>
        
        <div style="margin-top: 20px; padding: 15px; background-color: #eff6ff; border-radius: 8px; border-left: 4px solid #3b82f6;">
          <p style="margin: 0; font-size: 14px; color: #1e40af;">
            <strong>Nota:</strong> Esta solicitud fue enviada desde el formulario de beta en sustrato.ai
          </p>
        </div>
      </div>
    `;

    console.log('üì§ [EMAIL] Enviando correo a contacto@sustrato.ai...');
    const emailResult = await resend.emails.send({
      from: 'Sustrato.ai <noreply@sustrato.ai>',
      to: ['contacto@sustrato.ai'],
      replyTo: email,
      subject: emailSubject,
      html: emailHtml,
    });

    if (emailResult.error) {
      console.error('‚ùå [EMAIL_ERROR] Error al enviar correo:', emailResult.error);
      return NextResponse.json(
        { error: 'Error al enviar el correo. Por favor, int√©ntalo de nuevo.' },
        { status: 500 }
      );
    }

    console.log(`‚úÖ [SUCCESS] Solicitud de beta enviada correctamente desde ${ip} - Email ID: ${emailResult.data?.id}`);

    // 7. Respuesta de √©xito
    return NextResponse.json({
      success: true,
      message: 'Solicitud enviada correctamente. Te contactaremos pronto.',
      emailId: emailResult.data?.id
    });

  } catch (error) {
    console.error('[SIGNUP_REQUEST_ERROR]', error);
    return NextResponse.json(
      { error: 'Error interno del servidor. Por favor, int√©ntalo de nuevo.' },
      { status: 500 }
    );
  }
}
